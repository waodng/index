<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Madoko一个轻量级的在线编辑器]]></title>
      <url>%2F20170317%2Fcj0eaicco00056gp90jxh5j51.html</url>
      <content type="text"><![CDATA[MadokoMadoko is a fast markdown processor for writing professional articleswith a focus on simplicity and plain text readability. Read the reference manual. Explore the upper-right toolbox menu to discover how Markdown works. Alt-Q reformats the current paragraph. Enjoy!]]></content>
    </entry>

    
    <entry>
      <title><![CDATA['Test']]></title>
      <url>%2F20170316%2Fcj0eaicd200086gp9jweg5hl5.html</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[1.在GitHub上使用Hexo搭建博客教程]]></title>
      <url>%2F20170315%2Fcj0eaicch00036gp9lojote59.html</url>
      <content type="text"><![CDATA[1.在GitHub上使用Hexo搭建博客教程前言有朋友问了我关于博客系统搭建相关的问题，由于是做开发相关的工作，我给他推荐的是使用github的gh-pages服务搭建个人博客。 推荐理由： 免费：github提供gh-pages服务是免费的，有300MB空间；开源：由于github开源的原因，有很多人参与其中，自然技术支持很好。便捷：博客完全托管在github上，基本上不需要花时间去管理，博客使用Markdown语法，上手很容易。需要了解的内容（能掌握更好）： html+css+javascriptgit基本语法markdown语法nodejs目前，在github上搭建博客系统使用最多就是Hexo和Jekyll。Hexo是基于Nodejs开发的，Jekyll是基于Ruby开发的。 通过两个系统使用的比较，个人习惯喜欢Hexo，所以本文介绍的是Hexo搭建博客，如果你对Jekyll也有兴趣，可自行学习。 安装Git客户端已安装过的用户略过 下载Git客户端：下载地址安装Git客户端：Windows用户直接Next就可以了。Mac和Linxu系统的用户可通过命令方式安装，这里不详细介绍了。注册GitHub老手和已注册过的用户略过 打开GitHub官网：https://github.com/填写注册信息进行注册操作：没有登录的用户打开网站首页就会显示注册的操作（如图所示），或者是点击Sign up按钮进入注册详情页。 填写好注册信息，点击Sign up for GitHub(注册)按钮后，接下来是选择协议部分。根据自己的情况选择相关的协议，一般人选的都是免费的那一项。创建仓库登录github账号：在github首页点击Sign in按钮进入登录页面。填写用户名或邮箱和密码，点击Sign in按钮登录。 点击创建仓库：点击在登录的用户图像左边的+号和下三角符号按钮。 填写创建仓库信息：仓库名称必须是用户名.github.io（别问我为什么，人家就是这样规定的），比如我的用户名是SeayXu，就是SeayXu.github.io。 填写好相关信息，点击Create repository(创建仓库)按钮。配置SSH老手和已配置过的用户略过 打开Git Bash终端：在桌面右键，会出现”Git Bash here”的选项，点击即可。设置user name和email： $ git config –global user.name “你的GitHub用户名”$ git config –global user.email “你的GitHub注册邮箱”生成ssh密钥:输入下面命令 $ ssh-keygen -t rsa -C “你的GitHub注册邮箱”一般情况下是不需要密码的，所以，接下来直接回车就好。此时，在用户文件夹下就会有一个新的文件夹.ssh，里面有刚刚创建的ssh密钥文件id_rsa和id_rsa.pub。注：id_rsa文件是私钥，要妥善保管，id_rsa.pub是公钥文件。 添加公钥到github：点击用户头像，然后点击显示的Settings(设置)选项； 在用户设置栏，点击SSH and GPG keys选项，然后点击New SSH key(新建SSH)按钮； 将id_rsa.pub中的内容复制到Key文本框中，然后点击Add SSH key(添加SSH)按钮； 测试SSH： $ ssh -T git@github.com接下来会出来下面的确认信息： The authenticity of host ‘github.com (207.97.227.239)’ can’t be established.RSA key fingerprint is 17:24:ac:a5:76:28:24:36:62:1b:36:4d:eb:df:a6:45. Are you sure you want to continue connecting (yes/no)?输入yes后回车。然后显示如下信息则OK(其中的SeayXu是用户名)。 Hi SeayXu! You’ve successfully authenticated,but GitHub does not provide shell access.以上是准备工作。 创建本地仓库打开Git Bash终端，等待执行命令。 新建仓库文件夹：这里就取名为blog。 $ mkdir blog进入到blog文件夹： $ cd blog # 切换到blog目录初探Hexo如果没有安装Nodejs，请先安装Nodejs，Nodejs官网；以下操作是在blog文件夹中。 安装Hexo $ npm install hexo-cli -ghexo全局安装一次就够了，后面可以直接使用hexo相关的操作。 初始化Hexo $ hexo init安装依赖 $ npm install启动Hexo $ hexo server启动之后，打开浏览器，在地址栏输入：http://localhost:4000，你会看到Hexo的示例页面。 注：此时可以初始化git本地仓库了，或者是等本地博客搭建好之后也可以。 再探Hexo新建文章： $ hexo new 此时在source_posts文件夹中便会多出一个文档”title.md”.如果要删除，直接在此文件夹下删除对应的文件即可。 生成静态页面 $ hexo generate生成的静态内容在public文件夹内。 清除生成内容 $ hexo clean执行此操作会删除public文件夹中的内容。 部署Hexo $ hexo deploy该操作会将hexo生成的静态内容部署到配置的仓库中，请看下面介绍。 部署Hexo编辑配置文件，关联远程仓库：在编辑器中打开Hexo配置文件_config.yml，找到下面内容： DeploymentDocs: https://hexo.io/docs/deployment.htmldeploy: type:添加github仓库信息： DeploymentDocs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:SeayXu/seayxu.github.io.git #github仓库地址 branch: master # github分支注意：type、repo、branch的前面有两个空格，后面的:后面有一个空格 安装git插件 npm install hexo-deployer-git –save如果没有安装git插件，会有错误提示，安装后重新部署就可以了。 部署 $ hexo deploy如果没有意外，部署就成功了，可以打开 http://.github.io 查看。 hexo命令缩写 hexo g：hexo generatehexo c：hexo cleanhexo s：hexo serverhexo d：hexo deployhexo命令组合 hexo clean &amp;&amp; hexo g -s，就是清除、生成、启动hexo clean &amp;&amp; hexo g -d，就是清除、生成、部署 本文简单介绍Hexo的部署，接下来的文章会介绍Hexo的相关配置。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[欢迎使用 Cmd Markdown 编辑阅读器]]></title>
      <url>%2F20170315%2Fcj0eaicd7000a6gp97085rf3h.html</url>
      <content type="text"><![CDATA[欢迎使用 Cmd Markdown 编辑阅读器 我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，Cmd Markdown 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown： 整理知识，学习笔记 发布日记，杂文，所见所想 撰写发布技术文稿（代码支持） 撰写发布学术论文（LaTeX 公式支持） 除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载： Windows/Mac/Linux 全平台客户端 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 新文稿 或者使用快捷键 Ctrl+Alt+N。 什么是 MarkdownMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，粗体 或者 斜体 某些文字，更棒的是，它还可以 1. 制作一份待办事宜 Todo 列表 [ ] 支持以 PDF 格式导出文稿 [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 [x] 新增 Todo 列表功能 [x] 修复 LaTex 公式渲染问题 [x] 新增 LaTex 公式编号功能 2. 书写一个质能守恒公式[^LaTeX]$$E=mc^2$$ 3. 高亮一段代码[^code]1234567@requires_authorizationclass SomeClass: passif __name__ == '__main__': # A comment print 'hello world' 4. 高效绘制 流程图12345678st=&gt;start: Startop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 5. 高效绘制 序列图123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 6. 高效绘制 甘特图12345678910111213title 项目开发流程section 项目确定 需求分析 :a1, 2016-06-22, 3d 可行性报告 :after a1, 5d 概念验证 : 5dsection 项目实施 概要设计 :2016-07-05 , 5d 详细设计 :2016-07-08, 10d 编码 :2016-07-15, 10d 测试 :2016-07-22, 5dsection 发布验收 发布: 2d 验收: 3d 7. 绘制表格 项目 价格 数量 计算机 \$1600 5 手机 \$12 12 管线 \$1 234 8. 更详细语法说明想要查看更详细的语法说明，可以参考我们准备的 Cmd Markdown 简明语法手册，进阶用户可以参考 Cmd Markdown 高阶语法手册 了解更多高级功能。 总而言之，不同于其它 所见即所得 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。 什么是 Cmd Markdown您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 编辑/发布/阅读 Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。 1. 实时同步预览我们将 Cmd Markdown 的主界面一分为二，左边为编辑区，右边为预览区，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！ 2. 编辑工具栏也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 编辑区 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。 3. 编辑模式完全心无旁骛的方式编辑文字：点击 编辑工具栏 最右侧的拉伸按钮或者按下 Ctrl + M，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！ 4. 实时的云端文稿为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 编辑工具栏 的最右侧提示 已保存 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。 5. 离线模式在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。 6. 管理工具栏为了便于管理您的文稿，在 预览区 的顶部放置了如下所示的 管理工具栏： 通过管理工具栏可以： 发布：将当前的文稿生成固定链接，在网络上发布，分享 新建：开始撰写一篇新的文稿 删除：删除当前的文稿 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地 列表：所有新增和过往的文稿都可以在这里查看、操作 模式：切换 普通/Vim/Emacs 编辑模式 7. 阅读工具栏 通过 预览区 右上角的 阅读工具栏，可以查看当前文稿的目录并增强阅读体验。 工具栏上的五个图标依次为： 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落 视图：互换左边编辑区和右边预览区的位置 主题：内置了黑白两种模式的主题，试试 黑色主题，超炫！ 阅读：心无旁骛的阅读模式提供超一流的阅读体验 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境 8. 阅读模式在 阅读工具栏 点击 或者按下 Ctrl+Alt+M 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。 9. 标签、分类和搜索在编辑区任意行首位置输入以下格式的文字可以标签当前文档： 标签： 未分类 标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示： 10. 文稿发布和分享在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 (Ctrl+Alt+P) 发布这份文档给好友吧！ 再一次感谢您花费时间阅读这份欢迎稿，点击 (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！ 作者 @ghosert2016 年 07月 07日 [^LaTeX]: 支持 LaTeX 编辑显示支持，例如：$\sum_{i=1}^n a_i=0$， 访问 MathJax 参考更多使用方法。 [^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，四十一种主流编程语言。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[你好，世界!]]></title>
      <url>%2F20160815%2Fcj0eaicd500096gp9118hq5xd.html</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
